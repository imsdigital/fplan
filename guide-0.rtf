{\rtf1\ansi
{\fonttbl
{\f0\fswiss Helvetica;}
{\f1\fmodern Courier;}
{\f2\froman Times;}
{\f3\froman Symbol;}
}
{\info{\comment Translated from SGML to RTF w/ Linuxdoc-SGML}}

\page{\pard\plain\keepn\f0\fs36\b\tx576{1 Introduction}}
{}#{\footnote TOC_0}

${\footnote Introduction}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Introduction}


{\pard\sb200\plain\f0\fs24\b\tx576{1.1 About fplan}}
{}#{\footnote TOC_1}
{}K{\footnote About fplan}

The fplan application is designed to assist general aviation pilots in 
creating flight plans for cross country flights in powered aircraft. 
It was developed primarily for use on systems running the UNIX Operating 
System and the X11 Window System, with particular emphasis on Linux.
\par\pard\plain
\li500{}
\sb200\fi0
The input to fplan is a planfile that can be created with the user's 
favorite plain text editor. A self explanatory language is used to 
describe the flight; departure and destination airports, intermediate 
waypoints, navigation aids, winds aloft, and fuel consumption rates. 
The flight plan produced by fplan includes; wind corrected magnetic 
headings, distance, estimated time and fuel consumption for each leg, 
latitude and longitude for each checkpoint, and optional VOR fixes. 
A graphical preview of the flight is available on systems with X11 
Windows and the XView Toolkit.
\par\pard\plain
\li500{}
\sb200\fi0
For convenience, airports or navaids can be referenced by their ICAO 
identifier in planfiles.  The information that fplan requires is stored in 
database files, indexed by identifier.  For users in the United States, 
freely distributable database files are available that were derived from 
information from the National Flight Data Center. This data is {\i not} 
certified for navigation, and should be verified before actual use. It 
is unfortunate, but there is no known public domain source for similar 
information for areas outside the United States. (See the FAQ for more 
information).
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{1.2 Copyright}}
{}#{\footnote TOC_2}
{}K{\footnote Copyright}

This release of fplan is Copyright {\copyright} 1998,1999 
John C. Peterson, {\f1 <jaypee@netcom.com>}.
\par\pard\plain
\li500{}
\sb200\fi0
This software package is free software; you can redistribute it and/or 
modify it under the terms of the GNU General Public License, 
version 2. A copy is included in this distribution in the file 
named {\f1 LICENSE}.
\par\pard\plain
\li500{}
\sb200\fi0
This software package is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License, 
version 2 for more details.
\par\pard\plain
\li500{}
\sb200\fi0
I am making this stuff available in the hope that it 
will be useful to other pilots, but {\i you} are the final judge of its 
accuracy, applicability, suitability, etc. Pilots in the United States 
should be sure they understand the nature of their responsibilities in 
the area of preflight planning. See sections 3, 103, and 151 of part 
91 of the FARs for a quick refresher.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{1.3 Change History}}
{}#{\footnote TOC_3}
{}K{\footnote Change History}

The original author of fplan is Steve Tynor. His last public release 
was version 1.3, which was posted to volume 30 of the USENET newsgroup, 
comp.sources.misc in 1992. The file {\f1 CHANGE.LOG} contains a detailed 
description of the specific changes made to the source code over its 
lifetime. The sections below present an overview of the changes I have 
made since I took over as the new maintainer.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Changes from 1.4.1 to 1.4.2}}
{}K{\footnote Changes from 1.4.1 to 1.4.2}\par\pard\plain\li500\sb200\fi0

Release 1.4.2 of fplan contains an implementation of the graphical 
previewer based on the Gnome, Gtk+, Glib libraries. It also contains a 
number of bug fixes for problems reported by users. This release should 
still be considered a {\i beta release}! All users are encouraged 
to upgrade. Highlights of the bug fixes are listed below.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} A bug in the decode_common() function was fixed. It 
affected all plans containing waypoints with east magnetic variation, 
east longitude, or south latitude. The minutes field was not inheriting 
the arithmetic sign of the degrees field as the man page states.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} A bug related to the use of static read buffers was fixed in the 
paddb utility. It resulted in the generation of extraneous records 
that could potentially confuse the fast binary lookup algorithm 
used in fplan.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Changes from 1.4 to 1.4.1}}
{}K{\footnote Changes from 1.4 to 1.4.1}\par\pard\plain\li500\sb200\fi0

Release 1.4.1 of fplan contains {\i many} changes since the last public 
release by Steve Tynor (version 1.3). Because of the extensive scope of my 
changes, this release should be considered a {\i beta release}!
\par\pard\plain
\li500{}
\sb200\fi0
There were several basic goals of my changes; review the correctness of 
the navigation related algorithms and improve where possible, improve 
the documentation and examples, improve the user interface, and improve 
the portability of the source code. The order roughly reflects my 
assigned priority, from highest to lowest. Highlights of the changes 
and new features are listed below.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Updated airport and navaid database files.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} New implementation of graphical previewer (based on XView Toolkit).
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} New and improved waypoint types; 
\par\pard\plain
\li1500{}
\sb200\fi0
\li1500{}\fi-200{\f3\'B7} New Intersection waypoint type (i.e., intersection of VOR radials).
\par\pard\plain
\li1500{}
\sb200\fi0
\li1500{}\fi-200{\f3\'B7} New Relative waypoint type (direction and distance from identifier).
\par\pard\plain
\li1500{}
\sb200\fi0
\li1500{}\fi-200{\f3\'B7} Lat/Lon waypoints now have a more user friendly input syntax.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Enhanced output format (more precise lat/lon for use with GPS).
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Enhanced error checking of planfile syntax and semantics.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} More detailed documentation and examples.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Source code is now ANSI C compatible.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Many miscellaneous bug fixes.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{2 Installation}}
{}#{\footnote TOC_4}

${\footnote Installation}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Installation}

This section provides information on obtaining and installing fplan and 
the associated database files. There are binary distributions for 
Intel x86 based computers running the Linux, OS/2 and MS-DOS operating 
systems. Instructions are provided for users with other architectures 
and operating systems who will need to build fplan from source code. The 
database files are compatible with any architecture and operating system.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{2.1 Where to Get the Distribution}}
{}#{\footnote TOC_5}
{}K{\footnote Where to Get the Distribution}

I was fortunate to have obtained space for a world wide web site for 
fplan from METALab at the 
University of North Carolina at Chapel Hill.  I would like 
to extend my gracious thanks to them for donating resources to support 
this effort. All of the fplan binaries, source code, and the associated 
database files discussed below can be obtained from the fplan world wide 
web site at 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{2.2 The Binary Distribution for Linux}}
{}#{\footnote TOC_6}
{}K{\footnote The Binary Distribution for Linux}

{}#{\footnote linux_binary_dist}
{}K{\footnote linux_binary_dist}


A binary distribution of fplan is available for 
Linux on the Intel x86 
architecture. I don't have access to Linux on other architectures 
(like DEC Alpha, Motorola 680x0 or Power PC, Sparc). If anyone wants to 
contribute Linux binaries for these architectures please let me know 
and I will gladly make them available for everyone.
\par\pard\plain
\li500{}
\sb200\fi0
The binary distribution for Linux on Intel x86 is available in both 
Red Hat Package Manager 
and compressed tar formats. The binary in both distributions has been 
statically linked to the XView libraries so you {\i shouldn't} need to 
download anything else to get up and running. (Red Hat distributions 
included XView at one time, but this is no longer the case).
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Installing the Linux RPM Binary Distribution}}
{}K{\footnote Installing the Linux RPM Binary Distribution}\par\pard\plain\li500\sb200\fi0

For Red Hat Linux users, the 
RPM format of the 
binary distribution is the obvious choice. You will need to download 
one of the fplan-db database packages and the fplan executable package. 
The database is available in two flavors. The complete version that 
contains {\i all} airports, both public and private usage, and a 
version with only public usage airports (although they could still 
be privately owned).
\par\pard\plain
\li500{}
\sb200\fi0
Simply download the packages, then install or upgrade by running rpm in 
upgrade mode (upgrade mode can be used for the first install too). The 
fplan-db package should be installed first, because the fplan package has 
a registered dependence on the database. Of course you need to be the 
root user to do this. If you prefer using graphical user interfaces 
to do things, use glint or xrpm to update the packages. For command 
line freaks here's an outline of the upgrade commands;
\par\pard\plain
\li500{}
\sb200\fi0

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1              # change to the directory where the packages are \line
             % cd directory_where_the_packages_are \line
             # install the database files first \line
             % rpm -Uhv fplan-db-1998.05.07-1pub.noarch.rpm \line
             # now install the fplan executables \line
             % rpm -Uhv fplan-1.4.2-1.i386.rpm}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Installing the Linux Compressed Tar Distribution}}
{}K{\footnote Installing the Linux Compressed Tar Distribution}\par\pard\plain\li500\sb200\fi0

The Linux tar distribution is available in three compression formats, 
standard Unix compress, GNU gzip, and the Burrows Wheeler based 
bzip2 
(usually the best compression), so take your pick.
\par\pard\plain
\li500{}
\sb200\fi0
You will need to download one of the databases and the executable 
distribution.  The common database is available in two flavors. The 
complete version that contains {\i all} airports, both public and private 
usage, and a version that contains only public usage airports (although 
they could still be privately owned). Remember that you will need to be 
the root user if you plan to install anything in system directories.
\par\pard\plain
\li500{}
\sb200\fi0
If you have a preference, you can install the files from the fplan 
binary distribution anywhere you want. If the database is installed in a 
directory other than the default, you will need to set the environment 
variable that reflects where you put them. If you don't have a preference, 
you can use the default directory structure from the tar archives shown 
below. To use the default, change your working directory to {\f1 /usr} 
and extract the contents of the tar file there. 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1   /usr       # parent directory (can be /usr/local if you prefer) \line
  | \line
  +-- bin      # binary executables \line
  | \line
  +-- doc \line
  |   | \line
  |   +-- fplan  # html, ps, txt documentation \line
  | \line
  +-- man \line
  |   | \line
  |   +-- man1   # man pages for the executables \line
  |   | \line
  |   +-- man5   # man page for the database format \line
  | \line
  +-- share \line
      | \line
      +-- fplan  # common database files}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0
The fplan binary is configured at compile time to look for the common 
database files in the directory {\f1 /usr/share/fplan}, so if you put 
them there you don't have to do anything more. Otherwise, you will need 
to set the {\f1 FPLAN_COMMON_DBDIR} environment variable to reflect where 
you put them. (The best place to do this is in the initialization file 
for your command shell, the {\f1 ~/.cshrc} for C shell users, 
or the {\f1 ~/.profile} for Bourne shell users).
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{2.3 The Binary Distribution for OS/2 and MS-DOS}}
{}#{\footnote TOC_7}
{}K{\footnote The Binary Distribution for OS/2 and MS-DOS}

{}#{\footnote emx_binary_dist}
{}K{\footnote emx_binary_dist}


The binary distribution for 
OS/2 and 
MS-DOS was built using the excellent GCC/EMX compiler by Eberhard 
Mattes. The binary runs stand alone under OS/2 Warp and also under 
MS-DOS with a memory extender that is compatible with the type of 
extended memory used (which depends on the version of MS-DOS or 
MS-Windows you are using). The binary distribution is packaged using 
the freely available Info Zip archiving and compression utility, which is compatible 
with commercial products like PKUNZIP and WinZip.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Installing the OS/2 and MS-DOS Binary Distribution}}
{}K{\footnote Installing the OS/2 and MS-DOS Binary Distribution}\par\pard\plain\li500\sb200\fi0

You will need to download one of the databases and the executable 
distribution archived in Info Zip format. The common database is available 
in two flavors; the complete version that contains {\i all} airports, both 
public and private usage, and a version with only public usage airports 
(although they could still be privately owned). If you don't have a 
utility that is compatible with the distribution archives, you can get 
one for no cost from the Info Zip world wide web site at
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li500{}
\sb200\fi0
You can install the files from the fplan binary distribution anywhere 
you want if you have a preference.  You will need to set the fplan 
environment variables to reflect where you put the database files. If 
you don't have a preference you can use the default directory structure 
from the Zip archives shown below. In this case, you don't need to set 
any environment variables.
\par\pard\plain
\li500{}
\sb200\fi0

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1   \fplan      # parent directory (this can be anything you want) \line
  | \line
  +-- bin       # binary executables \line
  | \line
  +-- commondb  # common database files \line
  | \line
  +-- doc       # html, ps, txt documentation \line
  | \line
  +-- plans     # work directory for planfiles (and examples too) \line
  | \line
  +-- userdb    # user's personal database files}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0
The first step is to select a location in your file system for the 
fplan top level parent directory. You can call this directory anything 
you want, but the natural choice is "{\f1 fplan}". Create the top level 
directory using the mkdir command or your favorite file manager. Next, 
unpack both the database and executable archives while in the top 
level fplan directory. The Zip archives contain the sub directories 
described above, so you don't need to create them.
\par\pard\plain
\li500{}
\sb200\fi0
The next step is to set the fplan environment variables to specify 
the directories where the database files are located. This is done in 
the {\f1 CONFIG.SYS} file for OS/2 users and the {\f1 AUTOEXEC.BAT} file 
for MS-DOS and MS-Windows users. There are two environment variables, 
one for the common databases and one for your personal databases, 
where the later is optional. If you have more than a single drive or 
partition on your system, be sure to include the drive letter in the 
path specification. If you use the default directory structure from the 
Zip archives, an example entry might look something like this 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1         REM define the common database directory \line
        SET FPLAN_COMMON_DBDIR=D:\PROGS\FPLAN\COMMONDB \line
        REM define user's personal database directory (optional) \line
        SET FPLAN_USER_DBDIR=D:\PROGS\FPLAN\USERDB}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Where to get the Correct Memory Extender for MS-DOS}}
{}K{\footnote Where to get the Correct Memory Extender for MS-DOS}\par\pard\plain\li500\sb200\fi0

If you want to run fplan in a DOS environment using DOS Protected Mode 
Interface (DPMI) memory, such as a Windows DOS box, you will need the 
RSX 32 bit extender which you can obtain from 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li500{}
\sb200\fi0
If you want to run fplan in a DOS environment using VCPI memory, 
you can use the EMX 32 bit extender which you can obtain from 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{2.4 Building fplan from Source Code}}
{}#{\footnote TOC_8}
{}K{\footnote Building fplan from Source Code}

Users with architectures and operating systems for which binaries are 
not available will need to build fplan from source code. The source 
distribution is available from the fplan download page on the world wide 
web. For users with Unix based environments, the source is available in 
Red Hat Package Manager 
and compressed tar formats. The source is also available in 
Info Zip 
format for users with non-Unix based environments. Some general software 
requirements for build fplan from source are discussed below.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{General Requirements}}
{}K{\footnote General Requirements}\par\pard\plain\li500\sb200\fi0

The graphical previewer option in the original version of fplan 
required the Suntools Toolkit, available only on Unix based systems 
from Sun Microsystems. However, since the switch from SunOS to Solaris, 
Suntools is no longer being distributed by Sun. This release of fplan 
uses the very similar XView Toolkit, distributed by Sun in both binary 
{\i and} source form. This makes the fully functional fplan significantly 
more portable since XView has been ported by the user community to 
many popular Unix/X11 based environments such as, BSDI, FreeBSD, 
HP-UX, Irix, Linux, Solaris, Unixware, etc.
\par\pard\plain
\li500{}
\sb200\fi0
Alternatively, you can build with a previewer based on the new Gtk+ 
toolkit and GNOME application toolkit (look for GFX_GNOME in the 
Makefile; requires gnome-libs 0.99.3 or higher).  Once GNOME is more 
widely available (it is only in beta testing as I write this), the 
GNOME version will become the default.  At that time, we plan to add 
a graphical front end to all of fplan's features (while maintaining 
every current ability to use it in text-only mode).
\par\pard\plain
\li500{}
\sb200\fi0
Incidentally, the GNOME front end should eventually make fplan more 
portable than the XView version allows, as the Gtk+ toolkit is portable 
to many different display systems, and in particular, has already been 
ported to the MS Windows environment.
\par\pard\plain
\li500{}
\sb200\fi0
With the previewer disabled, fplan can be built on a wide variety of 
operating systems, including most non-Unix systems.  The specific 
requirements for building fplan are described below. If you have 
information regarding building fplan in other environments (Amiga, 
BeOS, Macintosh MPW, etc.), let me know and I'll update the information. 
Below is a list of the software development tools you will need.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000ANSI C Compiler
\line
I have converted the fplan source to ANSI C to take advantage of the 
better error checking that comes with function prototypes. (The original 
fplan was written in K & R style C). If you don't have an ANSI C 
compiler, the Free Software Foundation's GNU C compiler is an excellent 
choice (in addition to being completely free). Note that some of the C 
library functions used are not part of the ANSI standard, so with some 
compilers you need to include a flag to enable what is often called 
{\i extended} ANSI mode (for example: {\f1 -Ae} under HP-UX). Although 
most systems still have these functions, there are implementations of 
them in the file {\f1 strings.c} just in case.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000Lexical Analyzer Generator
\line
You won't actually need lex, flex, or any other lexical analyzer 
generator, {\i unless} you want to change the scanner description 
file, {\f1 fp_lex.l}. A default scanner is provided in the file 
{\f1 fp_lex.c}, which was generated with flex. If you use a scanner 
of your own, it must be lex compatible. To enable lex compatibility with 
flex, you must include the {\f1 -l} flag on the flex command line.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000Parser Generator
\line
You won't need a parser generator either, {\i unless} you want to change 
the parser description file {\f1 fp_yacc.y}. A default parser is 
provided in the file {\f1 fp_yacc.c}, which was generated using 
Robert Corbett's byacc. If you use your own parser generator, it should 
be configured to write fixed output files, {\f1 y.tab.c} and {\f1 y.tab.h} 
like ATT yacc.  The correct flags for ATT yacc, byacc, and 
Bison are included in the provided {\f1 Makefile}.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000XView Toolkit
\line
If you want to use the default implementation of the graphics previewer 
under Unix/X11, you will need Sun Microsystem's XView Toolkit. You can 
also build fplan without the previewer, in which case you don't need 
XView. The full source code for the XView Toolkit is available from 
the directory 
\par\pard\plain
\li2500{}
\sb200\fi0
\li2500{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li2000{}
\sb200\fi0
 
You will probably not want to build XView from source (although you 
can do it). You are better off just installing pre-built binaries, if 
they are available for your system. Here are some locations where you 
can obtain pre-built XView binaries for several different platforms 
\par\pard\plain
\li2500{}
\sb200\fi0
\li2500{}\fi-200{\f3\'B7} FreeBSD: {\f1 {}}
\par\pard\plain
\li2500{}
\sb200\fi0
\li2500{}\fi-200{\f3\'B7} HP-UX: {\f1 {}}
\par\pard\plain
\li2500{}
\sb200\fi0
\li2500{}\fi-200{\f3\'B7} Linux: {\f1 {}}
\par\pard\plain
\li2500{}
\sb200\fi0
\li2500{}\fi-200{\f3\'B7} Sun Solaris: ships with it already installed!
\par\pard\plain
\li2000{}
\sb200\fi0
 
Of the above, I can vouch only for the HP-UX binaries. They seem to work 
fine under HP-UX 10.20. I've also successfully tested fplan under Sun 
Solaris 5.2. If you have better information, drop me a note and I will 
add or make appropriate corrections to the above list.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000GNOME and Gtk+ Toolkits
\line
If you want to use the optional GNOME implementation of the graphics 
previewer under Unix/X11, you will need the latest gnome-libs (0.99.3 
or higher) and the latest Gtk+ libraries. They are available from 
\par\pard\plain
\li2500{}
\sb200\fi0
\li2500{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li2500{}
\sb200\fi0
\li2500{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li2000{}
\sb200\fi0
 
Once the GNOME libraries are more widely available (they came out of 
beta only just recently), the GNOME version will become the default.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000Make Utility
\line
Although it's not really essential, it's very helpful to have a make 
utility. The provided {\f1 Makefile} is not very complicated. It should 
work with most Unix make utilities, as well as ports of make to non-Unix 
environments. For building under OS/2 and MS-DOS using the GCC/EMX compiler 
by Eberhard Mattes, use {\f1 Makefile.EMX}.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Configuration and Compilation}}
{}K{\footnote Configuration and Compilation}\par\pard\plain\li500\sb200\fi0

Here is an outline of the steps required to build fplan from source; 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  Edit the {\f1 config.h} header file to specify the directories 
where fplan will look for the common, system wide and the user's personal 
database files. The directory for the common database files must be 
consistent with where the Makefile will install them (part of the 
next step). 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  Edit the {\f1 Makefile} to reflect your environment. You will need 
to edit various macros to specify which compiler to use, where the XView 
header and library files reside, and where things should be installed. I 
won't go into specifics here since each macro you will need to edit is 
described by comments in the {\f1 Makefile}. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  Run {\f1 "make"} to build the executables. If the build fails at 
some point, it is possible that your changes to the {\f1 Makefile} in 
the above step don't correctly reflect your environment. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  Run {\f1 "make install"} to install the executables. If you are 
installing fplan in directories like {\f1 /usr/bin} that are owned 
by root, this step (and the next two) will likely require that you log 
in as root to have the required privileges. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  Run {\f1 "make install-man"} to install the man pages. If you 
want to install the html format of the user's guide for browsing 
online, you will need to do that by hand. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  To install the database files, unpack the {\f1 airports.nav} and 
{\f1 vors.nav} files from the database distribution into the build 
directory. Then run {\f1 "make install-dbs"} to install them into the 
directory where fplan expects them.
\par\pard\plain
\li500{}
\sb200\fi0
The user's guide (this document) is written in SGML (Standard 
Generalized Markup Language) format. SGML documents are translatable  
into popular formats such as standard HTML as well as LaTeX (and dvi, 
postscript from there). The converted formats are up to date with  
respect to the SGML version when the distribution was packaged (by 
running a {\f1 "make doc"}). If you make changes to the master SGML 
format documents, you will need the SGMLtools formatting system to 
update the other formats, available from 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Building from the Source RPM Package}}
{}K{\footnote Building from the Source RPM Package}\par\pard\plain\li500\sb200\fi0

For Red Hat Linux users that want to rebuild from source, the 
RPM format of the source 
distribution is the obvious choice. If you insist on using graphical 
user interfaces to do things, you're going to have to grit your teeth 
this time. Here's an outline of the commands used to rebuild and 
install the new package; 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1              # install the fplan source package \line
             % rpm -Uhv /path_to_src_package/fplan-1.4.2-1.src.rpm \line
             # change to the directory where spec file is located \line
             % cd /usr/src/redhat/SPECS \line
             # build the binary package \line
             % rpm -bb fplan.spec \line
             # install the binary package \line
             % rpm -Uhv ../RPMS/i386/fplan-1.4.2-1.i386.rpm}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
Of course, you have to be the root user to do the above. Unlike the binary 
distribution, you {\i must} have the XView header files and libraries 
installed on your system to rebuild from source. If you don't already 
have them, you can likely find them from the extensive RPM database 
maintained by the rpm2html developers at 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{3 Preparing Flight Plans with fplan}}
{}#{\footnote TOC_9}

${\footnote Preparing_Flight_Plans_with_fplan}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Preparing Flight Plans with fplan}


{\pard\sb200\plain\f0\fs24\b\tx576{3.1 Overview of Creating a Flight Plan}}
{}#{\footnote TOC_10}
{}K{\footnote Overview of Creating a Flight Plan}

Creating a flight plan with fplan involves the following basic steps, 
determining the desired flight route(s), creating a planfile that reflects 
the desired route(s), and finally feeding the planfile to fplan which then 
grinds through all the calculations for computing the true and magnetic 
courses, estimated ground speeds, wind corrected headings, and so on. 
This section provides a brief overview of the steps required to create 
your own flight plans using fplan.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Determining the Flight Route}}
{}K{\footnote Determining the Flight Route}\par\pard\plain\li500\sb200\fi0

Any pilot who hasn't been living in a cave has very likely seen some of 
the commercial flight planning programs currently on the market. Some 
provide a GUI interface that allows you to point and click on the desired 
flight waypoints from a "sectional quality" chart display. I'd love to 
see fplan have this capability, but at this time it is {\i not} feasible. 
Digital charts of adequate quality (complete with victor airways, airspace 
boundaries and so forth) are simply not available from NOAA or any other 
government source at this time (see {\uldb Future Plans}{\v future-plans} below).
\par\pard\plain
\li500{}
\sb200\fi0
For the purpose of determining the best (and safest) flight route, 
your best resource is still a current NOAA Sectional Chart. While this 
doesn't rank very high on some people's "Gee Whiz" scale, it provides 
complete, accurate, and up to date navigational information which, 
{\i should} be an important consideration when preparing a flight plan. 
Just as with the "old fashioned" approach to flight planning, it's a 
good idea to mark your flight route(s) on the chart and take it with 
you on the flight.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Creating the planfile}}
{}K{\footnote Creating the planfile}\par\pard\plain\li500\sb200\fi0

The next step in the process is to create a planfile that reflects 
your chosen flight route. The user's personal and system wide or common 
database files allow you to specify a waypoint by its identifier for the 
case of an airport or navaid. You can also specify latitude and longitude 
for general landmarks, an intersection of radials from navaids or 
airports, or a point relative to an identifier (RNAV coordinates). At this 
point you may want to browse through some of the example planfiles to get 
a better feeling for how waypoints can be specified. The provided examples 
also serve as useful templates for creating your own planfiles. You will 
need a plain text editor to create the files (such as vi, Xemacs under 
Unix systems, or the Notepad application under MS-Windows).
\par\pard\plain
\li500{}
\sb200\fi0
In the case of navaids, you can get the associated 
identifier directly from a Sectional Chart. In the case of airports, 
you can refer to the "Airport/Facility Directory" published by NOAA, or 
similar publications available from commercial sources such as Airguide Publications, Inc. 
You should also be aware of the airport identifier convention used by 
the fplan databases (see {\uldb Airport Identifier Convention}{\v identifier-convention}). To verify that your identifiers are consistent 
with those in the provided databases, use fplan's lookup mode to 
retrieve the information associated with your identifiers 
(see {\uldb execution modes}{\v execution-modes}).
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Further Reading}}
{}K{\footnote Further Reading}\par\pard\plain\li500\sb200\fi0

At some point in time you should read the following section on the airport 
and navaid databases distributed with fplan. Impatient or experienced 
computer users can probably treat the section below that describes the 
planfile syntax as a reference and examine some of the provided example 
planfiles to get started. The fplan output is mostly self explanatory, 
but a section is included below that describes the fplan output in more 
detail. The fplan manual page provides detailed information on command 
line options when running fplan.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.2 The Airport and Navaid Databases}}
{}#{\footnote TOC_11}
{}K{\footnote The Airport and Navaid Databases}

The database files distributed with fplan contain a list of airports, 
balloonports, gliderports, heliports (in the file {\f1 airports.nav}), 
fixes, intersections, and navaids (in the file {\f1 vors.nav}).  Two 
versions of the database are available; the complete version that contains 
{\i all} airports, both public and private usage, and a version with only 
public usage airports (although they could be privately owned).  At this 
time the database contains information only for the United States. You 
may also wish to construct a personal database that contains entries for 
points of interest in your local area (see {\uldb personal databases}{\v personal-databases}). When trying to locate information for a 
given identifier, fplan always searches the user's personal databases 
{\i before} searching the system wide, or common databases.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Origin of the Database Information}}
{}K{\footnote Origin of the Database Information}\par\pard\plain\li500\sb200\fi0

The databases distributed with fplan were created using information from 
the (United States) National Flight Data Center. I wrote another software 
package to reformat the NFDC data (see {\uldb avdbtools}{\v avdbtools-software} below) for use with fplan. At one time, the National 
Flight Data Center distributed the databases on magnetic media only 
(no doubt one of the reasons that the old fplan database files were 
not updated very frequently). Now you can get the NFDC database files 
directly from their world web site at
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Airport Identifier Convention}}
{}K{\footnote Airport Identifier Convention}\par\pard\plain\li500\sb200\fi0

{}#{\footnote identifier_convention}
{}K{\footnote identifier_convention}


This release of the {\f1 airports.nav} database uses the "K" convention to 
distinguish between airports and navigation aids with the same identifier 
(a convention used by many GPS manufacturers). In this convention, all 
airport identifiers that are exactly 3 alphabetic characters long are 
prefixed by the character, "K", {\i regardless} of whether there is a 
navigational aid with the same identifier or not. Airport identifiers 
that are longer than 3 characters or contain numeric characters are 
unchanged. For example, HMT becomes KHMT, L78 remains L78, and CL35 
remains CL35.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Magnetic Variation of Airports and Navaids}}
{}K{\footnote Magnetic Variation of Airports and Navaids}\par\pard\plain\li500\sb200\fi0

The creation of the fplan database files was greatly complicated 
by the fact that the navaid files from NFDC no longer had {\i any} 
entry for magnetic variation. To solve this problem, I needed a good 
model to calculate the magnetic variation for a given latitude and 
longitude referenced to some datum. I concluded that the best solution 
was to use one of the geomagnetic field models in common use by the 
Geophysics community. The two most commonly encountered models are the 
International Geomagnetic Reference Field, 1995 Revision (IGRF-95), 
and the United States Department of Defense World Magnetic Model, 1995 
Revision (WMM-95). In these models, the geomagnetic field potential 
is represented by a summation of spherical harmonics (using associated 
Legendre functions). The coefficients are found by fitting the model to 
precise measurements of the earth's geomagnetic field. A secular change 
model is used to account for the slow drifting of the earth's magnetic 
field over time. The models are updated once every five years with the 
next model due to come out in the year 2000.
\par\pard\plain
\li500{}
\sb200\fi0
The database files distributed with fplan use the DoD World Magnetic 
Model, 1995 Revision (WMM-95) to estimate the magnetic variation of 
{\i all airports and navaids}. I could have used the NFDC database 
entries for variation of airports. However a closer examination of some 
of the data seemed to suggest that it had not been updated to account 
for secular change. (Several spot checks did not agree well with values 
taken from a current NOAA Sectional Chart). For consistency, it seemed 
best to use the WMM-95 model for both airports and navaids. You can find 
a more complete discussion of the model physics, accuracy of the models, 
and my numerical implementation of them in the avdbtools user's guide 
(see section {\uldb avdbtools}{\v avdbtools-software} below).
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Accuracy of Database with GPS Receivers}}
{}K{\footnote Accuracy of Database with GPS Receivers}\par\pard\plain\li500\sb200\fi0

{}#{\footnote datums_and_gps}
{}K{\footnote datums_and_gps}


General aviation pilots have discovered the many advantages offered 
by GPS (Global Positioning System) units in a big way. A GPS receiver, 
together with a programmable navigation computer running on an embedded 
microprocessor, provides unsurpassed accuracy and convenience for as little 
as a few hundred dollars. The accuracy of civilian units that use only 
the C/A code on frequency L1 are such that the computed position is within 
100 meters of the actual position about 95% of the time. However, 
don't be seduced by the accuracy of the system hardware itself. You probably 
won't do anywhere near that good using coordinates from this database.
\par\pard\plain
\li500{}
\sb200\fi0
An issue you need to consider is consistency of datums.  A datum is 
a set of parameters that define a mathematical ellipsoid designed to 
approximate the earth's actual surface or geoid (the equatorial radius 
of the earth is about 21 nautical miles larger than the polar radius). 
You must specify the latitude, longitude, {\i and the associated datum} 
to uniquely describe a given point on the earth's surface. Most GPS 
receivers are configured by default to use the World Geodetic System of 
1984, or WGS-84 datum, which is also the datum used on NOAA Sectional 
Charts. Some datums are designed to be a reasonably good fit over most of 
the earth's surface (like WGS-84), while others are carefully designed to 
provide the absolute best possible accuracy in a {\i very small area} 
(such as the one that was developed for the construction of the tunnel 
under the English Channel). Most GPS receivers can be configured to use 
any one of a wide variety of published datums (my trusty Garmin 89 has 
104 choices).
\par\pard\plain
\li500{}
\sb200\fi0
The error associated with inconsistent datums can be {\i almost a 
mile} in some cases, and is greater than 100 meters to be sure! The bad 
news is that I have {\i not} been able to determine the datum associated 
with the latitude, longitudes values given in the NFDC databases. It's 
possible that no uniform datum was used (another possible reason why 
the NFDC does not represent the database as an official product). Of 
course you can always validate a latitude, longitude value from the 
database or a latitude, longitude value calculated by fplan by just 
taking the few minutes it takes to plot it on a current NOAA Sectional 
or VFR Terminal Area Chart. This also shows you exactly where a GPS unit 
(configured for the WGS-84 datum), would take you.
\par\pard\plain
\li500{}
\sb200\fi0
Don't feel bad if this is all news to you. It seems that even the US 
military is still educating itself on this issue. During the Gulf War, 
many of the errors in high altitude B-52 bombing runs over Iraq were 
traced to inconsistent datums. You can find an interesting discussion 
of this and datums in general at 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Other Database Quality Issues}}
{}K{\footnote Other Database Quality Issues}\par\pard\plain\li500\sb200\fi0

You should be aware of the fact that the database files from the National 
Flight Data Center (used to construct the ones distributed with fplan) 
are not official products approved for navigation. To be more specific, 
the NFDC world wide web site clearly states, {\f1 "FOR RESEARCH PURPOSES 
ONLY -- NOT CERTIFIED FOR NAVIGATION"}.
\par\pard\plain
\li500{}
\sb200\fi0
I don't know all the reasons why NFDC makes this disclaimer, they are 
listed in the "Airport/Facility Guide" as the main point of contact 
for reporting errors in that information. Funding is no doubt one 
issue. The issues related to the magnetic variation values discussed 
above are another obvious reason, but there could easily be many other 
issues as well. {\i It would be prudent to heed this clear warning and 
validate information used from the database files with other available 
sources}. For example, if you question the validity of a latitude and 
longitude value you can simply plot the point on a Sectional Chart. It's 
only common sense that any database of this size {\i will} have errors 
in it so exercise appropriate care.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Creating your own Personal Database}}
{}K{\footnote Creating your own Personal Database}\par\pard\plain\li500\sb200\fi0

{}#{\footnote personal_databases}
{}K{\footnote personal_databases}


For your convenience, fplan allows users to have personal databases of 
their own. They are always searched {\i before} the system wide or common 
database of the same type (airport or VOR). The common database files 
distributed with fplan only provide coverage for the United States. 
Users that live outside the United States will want to construct a 
personal database for their local area. No matter where you live, 
personal databases are useful for defining things like boundaries 
of controlled airspace, mountain passes or other geographical points 
of interest, emergency landing sites, and so on. It may be wise to 
choose personal identifiers that begin with an underscore (the "_" 
character) to distinguish them from identifiers in the common database. 
This is not a requirement, but it's a useful mechanism for eliminating 
any possible confusion.
\par\pard\plain
\li500{}
\sb200\fi0
The format of both the common and personal database files are described 
in the fplan entry in section 5 of the man pages (users of non-Unix 
systems can refer to the formatted version of this document in the 
file {\f1 fplan_5.ps} or {\f1 fplan_5.txt}). Note that the text versions of 
your personal database files must be processed by the paddb application 
before they can be read by fplan. You can install your personal database 
files anywhere you like. Simply set the {\f1 FPLAN_USER_DBDIR} environment 
variable to the directory where it can be found. (The best place 
to do this is in the initialization file for your command shell, the 
{\f1 ~/.cshrc} or {\f1 ~/.profile} files for Unix shell 
users, the {\f1 CONFIG.SYS} file for OS/2 users, or the {\f1 AUTOEXEC.BAT} 
file for MS-DOS users).
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.3 Description of planfile Syntax}}
{}#{\footnote TOC_12}
{}K{\footnote Description of planfile Syntax}

fplan reads a free format input language to specify the departure and 
destination airports, intermediate waypoints, fuel on board, fuel burn 
rates, winds aloft, etc. This section presents a detailed reference 
for the syntax of the planfile and planfile statements. However, you 
will likely find the syntax of the fplan language to be largely self 
explanatory. Impatient or experienced computer users may want to skip this 
section and examine some of the provided example planfiles instead. In 
any case, the provided examples serve as useful templates for creating 
your own planfiles. Here is an overview of the syntax of the planfile;
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  The planfile consists of any number of statements, each 
terminated by a semicolon ";" character. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  All reserved words of the language and user input tokens must be 
separated by white spaces (either a blank, comma, tab or newline character). 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  When fplan encounters a "#" comment character while reading a 
planfile, all the characters that follow it on that line are silently 
discarded. Comments can legally appear anywhere in the planfile where 
a white space is legal. This means it is possible to break a statement 
up into multiple lines with comments on each line. This often greatly 
enhances the readability of the planfile. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  Reserved words that are part of the language are case sensitive, 
they {\i must} be lowercase. However, identifiers are not case sensitive 
and may be written in either upper or lower case. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7}  In the case of a conflict between an identifier and an fplan 
reserved word (for example an airport named VIA), use upper case to 
prevent fplan from interpreting the identifier as a reserved word 
of the language. 
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Specifying Units}}
{}K{\footnote Specifying Units}\par\pard\plain\li500\sb200\fi0

In the planfile, the default unit for distance (except for altitudes) 
is nautical miles and the default unit for speed (such as true airspeed 
of the aircraft and wind speeds) is knots (nautical miles per hour). You 
can specify different units by using appropriate keywords {\i after} 
any numeric value. The keywords are
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\b mi}, {\b smi} - statue miles
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\b nm}, {\b nmi} - nautical miles
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\b mph} - statue miles per hour
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\b knots}, {\b kts} - nautical miles per hour
\par\pard\plain
\li500{}
\sb200\fi0
In the output flight plan the default unit for distance is nautical 
miles and the default unit for speed (such as true airspeed of the 
aircraft and wind speed) is knots (nautical miles per hour). You can 
change this to statue miles and statue miles per hour by including the 
{\f1 -s} flag on the command line.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Waypoint Statements}}
{}K{\footnote Waypoint Statements}\par\pard\plain\li500\sb200\fi0

The planned flight route is specified by of a sequence of waypoint 
statements which begin with either the {\b from}, {\b via}, or {\b to} 
reserved words, corresponding to the departure waypoint, enroute waypoints, 
and destination waypoint, respectively. The planfile can contain more than 
one route. This is useful for computing several routes ahead of time and 
selecting the best one on the day of the flight.
\par\pard\plain
\li500{}
\sb200\fi0
The order in which the databases are searched is different for terminal 
and enroute waypoints. For the case of a departure or destination 
waypoint (the {\b from} or {\b to} keywords), the {\f1 airports.nav} 
databases are searched first, then the {\f1 vors.nav} databases are 
searched for the given identifier. For the case of an enroute waypoint 
(the {\b via} keyword), the {\f1 vors.nav} databases are searched 
first, then the {\f1 airports.nav} databases. In each of these cases, 
when the {\f1 airports.nav} databases are searched, the user's personal 
{\f1 airports.nav} database is searched {\i before} the system wide, 
or common {\f1 airports.nav} database. Similarly, when the {\f1 vors.nav} 
databases are searched, the user's personal {\f1 vors.nav} database is 
searched {\i before} the system wide, or common {\f1 vors.nav} database. 
The syntax of the waypoint statements are now described.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000(from|via|to) identifier;
\line
Specifies a waypoint by its identifier. It is an error if 
{\b identifier} cannot be found in any of the databases.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000(from|via|to) identifier_1 radial_1 identifier_2 radial_2 \{ name \{ city \{ comment \} \} \};
\line
Specifies an intersection waypoint. Both {\b radial_1} and 
{\b radial_2} represent the {\i magnetic} direction from the 
reference points corresponding to the respective identifiers to the 
desired waypoint. The convention of magnetic direction is a natural 
choice since VOR radials are magnetic, rather than true. An error is 
issued if no intersection exists or the intersection is poorly conditioned 
(when the defining directions are almost parallel to each other). Up to 
three optional quoted strings corresponding to the {\b name}, {\b city}, 
and {\b comment} fields in the output form may be specified.  It is an 
error if {\b identifier_1} or {\b identifier_2} cannot be 
found in any of the databases.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000(from|via|to) identifier direction / distance \{ name \{ city \{ comment \} \} \};
\line
Specifies a relative waypoint (like an entry to an RNAV computer). 
The specified {\b direction} of the waypoint relative to {\b identifier} 
is assumed to be in degrees {\i magnetic}, rather than true. As always, 
the specified {\b distance} is in nautical miles, unless an appropriate 
distance qualifier keyword is present that specifies otherwise. 
One should avoid using a {\b distance} that is excessively large because 
the magnetic variation used for the waypoint is the same value as for 
{\b identifier} (a few tens of nautical miles is not a problem). Up to 
three optional quoted strings corresponding to the {\b name}, {\b city}, 
and {\b comment} fields in the output form may be specified. It is an 
error if {\b identifier} cannot be found in any of the databases.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000(from|via|to) latitude longitude variation \{ name \{ city \{ comment \} \} \};
\line
Specifies a waypoint by its latitude and longitude. The format for 
{\b latitude} and {\b longitude} entries are; integer valued degrees, 
the ":" character, integer valued arc minutes, the ":" character, 
decimal arc seconds, a white space, and the {\b north} or {\b south} 
keyword for {\b latitude}, or the {\b east} or {\b west} keyword for 
{\b longitude}. The magnetic {\b variation} must be specified because 
it is required to convert a true course to a magnetic one. The format 
for the magnetic {\b variation} entry is; decimal degrees followed by 
a white space and either the {\b east} or {\b west} keyword. Up to 
three optional quoted strings corresponding to the {\b name}, 
{\b city}, and {\b comment} fields in the output form may be 
specified.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000via distance \{ name \{ city \{ comment \} \} \};
\line
Specifies an incremental waypoint. Note that the incremental waypoint 
can be used only in an enroute context. If {\b distance} is positive, it 
specifies the distance from or after the last non-incremental waypoint. If 
negative, the absolute value of {\b distance} specifies the distance 
to or before the next non-incremental waypoint. Incremental waypoints 
are useful for dead reckoning flight where it is desirable to have 
checkpoints every so often. They are also a very useful for specifying 
the end of climb to cruise, or for specifying the beginning of descent 
(this admits more precise specification of fuel rates, and estimates of 
fuel consumption). Up to three optional quoted strings corresponding 
to the {\b name}, {\b city}, and {\b comment} fields in the output 
form may be specified. Note that successive incremental waypoints still 
refer to the {\i same} previous non-incremental waypoint and {\i not} 
to the last incremental waypoint as one might think. Thus the following 
two successive waypoint statements refer to {\i exactly the same point} 
\par\pard\plain
\li2500{}
\sb200\fi0
\li2500{}\fi-200{\f3\'B7} {\b via 10 'point 1';}
\par\pard\plain
\li2500{}
\sb200\fi0
\li2500{}\fi-200{\f3\'B7} {\b via 10 'point 2';}
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Fuel Management Statements}}
{}K{\footnote Fuel Management Statements}\par\pard\plain\li500\sb200\fi0

The following statements are used to specify the initial amount of usable 
fuel on board, the fuel burn rate(s), and any additional fuel used. 
In order for fuel consumption computations to be made, the initial amount 
of usable fuel on board and the fuel burn rate {\i must} be specified.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000fuel_amount quantity;
\line
Specifies the initial amount of usable fuel on board. The value given 
for the numeric argument {\b quantity} must be a positive number. The 
units used for {\b quantity} are arbitrary; pounds, gallons, imperial 
gallons, quarts, liters or whatever units happen to be convenient. Note 
that {\b quantity} should {\i not} include any unusable fuel on board. 
This statement applies to the waypoint at the start of the current leg. 
It is an error for this statement to be applied to a waypoint that is 
not a departure waypoint (specified by the {\b from} keyword).
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000fuel_rate rate;
\line
Specifies the fuel consumption rate. The value given for the numeric 
argument {\b rate} must be a positive number, and in units per hour, 
where the units used agree with those used in the {\b fuel_amount} 
directive above. This statement applies to the current and all successive 
legs until another {\b fuel_rate} statement is encountered. You may 
want to include a waypoint for the end of the climb to cruise, and at the 
start of the descent for landing, so that the fuel rates can be updated 
for the power settings used (incremental waypoints are a good choice).
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000fuel_used quantity;
\line
Specifies any additional fuel used that is not accounted for by the 
enroute flight time and fuel burn rate (such as extra amounts used for 
taxi, run up, traffic related delays and so on).  The units used for 
the numeric argument {\b quantity} must agree with the units used in 
the {\b fuel_amount} directive to remain consistent. This 
statement applies to the waypoint at the start of the current leg.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Miscellaneous Statements}}
{}K{\footnote Miscellaneous Statements}\par\pard\plain\li500\sb200\fi0

\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000alt feet;
\line
Specifies the flight altitude in feet above mean sea level. In the 
current version of fplan, the value is simply copied to the output form, 
but future versions may use it for density altitude or similar performance 
related computations.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000comment string;
\line
The given {\b string} replaces the comment field of the previous waypoint 
in the route. If this statement appears before the first waypoint statement 
in the planfile, it has no effect.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000nav number identifier;
\line
Specifies that the VOR receiver given by {\b number} will be tuned to the 
station given by {\b identifier}. The binary distribution is configured 
to accept up to 6 navigation receivers. VOR fixes are computed for each 
receiver and waypoint in the route(s). It is an error if {\b identifier} 
cannot be found in any of the databases.
\par\pard\plain
\li2000{}
\sb200\fi0
Note that when auto track is enabled (default is disabled), receiver 
1 is automatically tuned to the next waypoint (if it is a navigation 
aid), or to the previous waypoint (if it is a navigation aid) and user 
specified values for {\b nav 1} are silently ignored. Auto track can 
be enabled with the {\f1 -t} command line switch.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000tas speed;
\line
Specifies the true airspeed of the aircraft. This statement applies to 
the current and all successive legs until another {\b tas} statement 
is encountered. If no {\b tas} statement is included in the planfile, 
enroute time and fuel consumption estimates can not be made.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000wind direction @ speed;
\line
Specifies the direction and speed of winds aloft. The {\b direction} 
argument must be in units of degrees relative to true north. This is the 
convention used in the winds aloft forecast from Flight Service. (Recall 
that winds are always reported in degrees with respect to true north, 
except when reported by the control tower or in (automated) airport 
surface observations, in which case they are relative to magnetic north, 
as runways are). This statement applies to the current and all successive 
legs until another {\b wind} statement is encountered. If no {\b wind} 
statement is included in the planfile, the winds aloft are assumed to 
be calm.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.4 Execution of fplan }}
{}#{\footnote TOC_13}
{}K{\footnote Execution of fplan }

{}#{\footnote execution_modes}
{}K{\footnote execution_modes}


In this section, we provide a brief overview of running fplan. For a 
complete reference on command line syntax and options, see the provided 
man page. fplan can be run in one of four different major {\i modes} which 
are described below. The different modes are selected by using the 
appropriate flag as the {\i first} command line option.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000Normal Mode
\line
In normal or default mode, the given planfile is parsed, the flight 
route(s) are computed, and a flight plan including wind corrected 
headings, distance, estimated time, and fuel consumption for each leg, 
VOR fixes for each checkpoint, and so on, are written to the standard 
output. Normal mode is the {\i default} mode of operation and does 
not require any special flag as the first command line option.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000Graphics Mode
\line
In graphics mode, the specified planfile is parsed, the flight route(s) 
are computed, and the results are displayed in an XView window. (For 
Unix/X11 systems with the XView Toolkit only, also installation 
dependent). The window includes buttons for scrolling the chart to the 
first and last waypoints, as well as for setting the magnification 
scale factor of the chart. Graphics mode is selected by using {\f1 -g} 
as the first command line option.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000Lookup Mode
\line
In the lookup mode of operation, all remaining command line arguments 
are assumed to be airport or navaid identifiers. fplan will search the 
user's personal and system wide databases and will print information for 
each match to the standard output. If any identifier was found in both 
the airports and navaid databases, then both entries are printed. Lookup 
mode is selected by using {\f1 -l} as the first command line option.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000Reverse Mode
\line
In reverse mode, the given planfile is parsed, the flight route(s) 
are computed, and a planfile for the {\i return} trip is written to the 
standard output. All waypoints are reversed and incremental waypoints are 
recomputed. Correct directives are included so that each waypoint uses 
the same VORs as in the input planfile. Fuel, altitude, airspeed and wind 
statements are {\i not} included in the reversed planfile. They may be 
included in a future release. Reverse mode is selected by using {\f1 -r} 
as the first command line option.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.5 Computed Courses and Headings}}
{}#{\footnote TOC_14}
{}K{\footnote Computed Courses and Headings}

Although there are an infinite number of courses that connect two given 
points on the earth's surface, there are only two meaningful ones, 
the great circle and rhumb line courses. By definition, the great 
circle course minimizes the distance traveled. It can be visualized as 
the intersection of the earth's surface with the unique plane defined 
by the center of the earth and the two given points. A great circle 
course appears as a straight line on a chart that uses the Gnomonic 
projection system. The disadvantage of the great circle course is that 
the (calm wind) heading with respect to true north is {\i not} constant, 
except for the special case where the two given points are on the same 
meridian (i.e., have identical longitude). Great circle courses and 
close approximations to them are routinely used on long distance 
transcontinental flights.
\par\pard\plain
\li500{}
\sb200\fi0
This release of fplan computes a rhumb line course. By definition, 
it is the constant (calm wind) heading course that connects the two 
given points. A rhumb line course appears as a straight line on a chart 
that uses the Mercator projection system. At mid latitudes, the extra 
distance traveled for the rhumb line course is small when the points are 
a few tens or hundreds of nautical miles apart. The rhumb line course 
is probably a better choice than the great circle course for general 
aviation use. The only corrections to the estimated headings for each 
leg that the pilot needs to be concerned about, are those corrections 
associated with changing winds aloft.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.6 Description of fplan Output}}
{}#{\footnote TOC_15}
{}K{\footnote Description of fplan Output}

The fplan output consists of three distinct groups of columns; the waypoint 
information columns, the flight leg columns, and the optional VOR fix 
columns (disabled by default, and enabled with the {\f1 -w} command line 
option). In the fplan output, each route begins with a group of header 
lines. They contain symbolic entries that describe the numeric entry at 
that position in the data that follows. Most of them are self explanatory, 
but because of space limitations, some of them are not obvious. 
They are documented here for completeness.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Waypoint Information}}
{}K{\footnote Waypoint Information}\par\pard\plain\li500\sb200\fi0

\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 WAYPOINT} - waypoint or facility name (from database or planfile)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 CITY, ST} - associated city and state (from database or planfile)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 COMMENTS} - additional comments (from database or planfile) 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 IDENT} - facility identifier (from the database)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 TYPE} - fplan waypoint type (from the planfile)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 LAT LON} - latitude and longitude (datum unknown) 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 FREQ} - facility frequency (from the database)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 ELEV} - facility elevation (from the database) 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 TOTD} - total distance traveled to waypoint (computed by fplan)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 REMD} - total distance remaining to waypoint (computed by fplan) 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 FUEL} - usable fuel remaining at waypoint (estimated by fplan)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 ETA} - estimated time of arrival at waypoint (estimated by fplan)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 ATA} - actual time of arrival at waypoint (blank for pilot's entry)
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Flight Leg Information}}
{}K{\footnote Flight Leg Information}\par\pard\plain\li500\sb200\fi0

\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 WIND} - winds aloft (degrees true, from the planfile)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 MC} - magnetic course for this leg (computed by fplan)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 MH} - magnetic heading for this leg (estimated by fplan) 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 TAS} - true airspeed (from the planfile)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 EGS} - estimated ground speed (estimated by fplan)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 AGS} - actual ground speed (blank for pilot's entry) 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 DIST} - distance traveled for this leg (computed by fplan)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 ETE} - estimated time enroute for this leg (estimated by fplan)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 ATE} - actual time enroute for this leg (blank for pilot's entry) 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 ALT} - MSL altitude for this leg (from the planfile)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 FRATE} - fuel burn rate for this leg (from the planfile)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 FUSED} - fuel used for this leg (estimated by fplan) 
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{VOR Fix Information}}
{}K{\footnote VOR Fix Information}\par\pard\plain\li500\sb200\fi0

\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 [1-6]} - navigation receiver number (from the planfile)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 IDENT} - facility identifier (from the database) 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 FREQ} - facility frequency (from the database) 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 RAD} - magnetic radial to waypoint (computed by fplan)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 DME} - over ground distance to waypoint (computed by fplan) 
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.7 Hints for Printing fplan Output}}
{}#{\footnote TOC_16}
{}K{\footnote Hints for Printing fplan Output}

Note that fplan sends all of its output to the standard output, which in 
most environments is the terminal screen. If you want to capture the 
output to a file or print it, you will need to redirect the standard 
output. On most systems you can redirect the standard output to a file 
by appending {\f1 "> filename"} to the end of the fplan command line 
(without the quotes).
\par\pard\plain
\li500{}
\sb200\fi0
To be useful in practice, we want a hardcopy of the flight plan that is as 
legible as possible. In the cockpit, it is desirable to quickly extract 
needed information, so we don't get too distracted from other tasks that 
are placing demands on our attention. Since the output from fplan is 
typically wider than the standard 80 columns supported by the default 
portrait mode of most printers, we will need some type of print utility 
software (that supports landscape mode and maybe selectable fonts) to get 
the best possible results. Note that you must print fplan output using 
fixed width fonts. If you print fplan output using fonts with proportional 
spacing (like most fonts used in word processors), the columns will no 
longer be aligned properly, rendering the output unreadable.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Printing on Unix Systems}}
{}K{\footnote Printing on Unix Systems}\par\pard\plain\li500\sb200\fi0

On Unix systems, the print utilities 
a2ps 
and nenscript are both good choices for pretty printing fplan output. 
Both support landscape orientation and selectable fonts, and both 
generate postscript output. If you are like me and don't have a printer 
with hardware support for postscript, don't worry. Just get the ghostscript package 
and follow the instructions for installing it as a printer filter. (Note 
that you don't {\i have to} install it as a filter, but it most definitely 
provides maximum ease of use).
\par\pard\plain
\li500{}
\sb200\fi0
For the a2ps utility, you will likely want to include the following 
options; {\f1 -1} to select one virtual page per physical page for 
maximum readability, {\f1 --landscape} to enable landscape orientation, 
{\f1 --columns-per-page=98} to specify the width of the output (the 
value given works for fplan wide format output with two VOR fixes), 
and possibly {\f1 --encoding=PCG} to enable support for IBM PC Graphics 
characters (they are present when fplan is run with the {\f1 -e} flag).
\par\pard\plain
\li500{}
\sb200\fi0
For the nenscript utility, you will likely want to include the following 
options; {\f1 -1} to select single column output for maximum readability, 
{\f1 -r} to enable landscape orientation, {\f1 -f font} to specify the font 
(for fplan wide format output with two VOR fixes, {\f1 Courier12} works 
very well).
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Printing on OS/2 and MS-DOS Systems}}
{}K{\footnote Printing on OS/2 and MS-DOS Systems}\par\pard\plain\li500\sb200\fi0


{\pard\sb200\plain\f0\fs24\b\tx576{3.8 Inherent Limitations of fplan}}
{}#{\footnote TOC_17}
{}K{\footnote Inherent Limitations of fplan}


{\pard\plain\f0\sb200\fs24\b\tx576{Spherical Trigonometry}}
{}K{\footnote Spherical Trigonometry}\par\pard\plain\li500\sb200\fi0

The algorithms used by fplan for computing the course and distance 
between two waypoints, as well as the algorithms used to compute the 
location of intersection and relative waypoints have some practical 
limitations. Columbus was right, the earth is not flat, but it's not 
a perfect sphere either. The earth's shape is best described as an 
ellipsoid with the equatorial radius about 21 nautical miles larger than 
the polar radius. fplan uses algorithms based on spherical trigonometry 
which don't exactly account for the ellipsoidal shape of the earth's 
surface.  The approximation used is quite reasonable {\i provided} 
that the distance between waypoints, or the distance from the defining 
identifier(s) and intersection or relative waypoints is not too large 
(a few tens of nautical miles is not a problem).
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{4 Additional Information}}
{}#{\footnote TOC_18}

${\footnote Additional_Information}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Additional Information}


{\pard\sb200\plain\f0\fs24\b\tx576{4.1 Code History}}
{}#{\footnote TOC_19}
{}K{\footnote Code History}

Although this software retains the name fplan, it is a derivative 
of the original work of Steve Tynor.  His last public release was version 1.3, which was 
posted to volume 30 of the USENET newsgroup, comp.sources.misc in 1992.
\par\pard\plain
\li500{}
\sb200\fi0
I've been using fplan to prepare flight plans since release 1.2, 
so I've had the opportunity to use it in practice and formulate some 
ideas for possible improvements. The unusual El Ni\'F1o driven 
rains we experienced in San Diego during the first few months of 1998 
are largely responsible for this effort. One rain soaked weekend in Jan 
I decided to implement some of the improvements from my own want list (as 
a flimsy substitute for actually getting my feet off the ground). I 
later contacted Steve Tynor with these changes. He indicated he was 
busy with other things and was no longer actively maintaining fplan. 
I decided to expand the scope of my improvements enough to get things back 
to a point where more pilots will be inclined to use it again {\i and} 
contribute to further development of it. The name fplan was retained 
with Steve's blessing.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{4.2 Future Plans}}
{}#{\footnote TOC_20}
{}K{\footnote Future Plans}

{}#{\footnote future_plans}
{}K{\footnote future_plans}



{\pard\plain\f0\sb200\fs24\b\tx576{Graphical User Interface}}
{}K{\footnote Graphical User Interface}\par\pard\plain\li500\sb200\fi0

Planning and preparations for a graphical user interface for fplan 
have begun. This will let users construct, load, and save planfiles 
using a point and click interface. Michael K. Johnson {\f1 <johnsonm@redhat.com>} 
has started this effort by writing an implementation of the graphical 
previewer based on the Gnome, Gtk+, Glib libraries.  Michael quickly 
convinced me that the Gnome environment would be the best choice for 
further development of a GUI interface, and fplan is now officially 
part of the Gnome Project. 
As a result, the fplan project now has a CVS repository to facilitate 
development by multiple programmers (also see {\uldb Mailing List}{\v mailing-list} below).  A final product is not due for awhile, the 
fplan internal data structures will require some extensive modifications 
before work can proceed.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Planning from Digital Charts}}
{}K{\footnote Planning from Digital Charts}\par\pard\plain\li500\sb200\fi0

Some of the currently available commercial flight planning programs 
provide a GUI interface that allows you to point and click on the desired 
flight waypoints from a "sectional quality" chart display. Of course, 
I agree with those who think this is a very desirable feature. However, 
any digital chart (hybrid raster and vector) that could be assembled from 
data currently available from government sources would be inferior to 
hardcopy NOAA Sectional Charts. (This is consistent with the observation 
that the cost of digital chart updates from these commercial offerings 
range from kinda, to really expensive). Hopefully, NOAA will someday 
release their charts in a digital form at prices comparable with current 
hardcopy charts (and using data formats that are open to the public). When 
good quality digital charts become a reality, I will become motivated 
to develop a similar GUI front end for fplan. You can get the current 
status of efforts in this area from the NOAA Office of Aeronautical 
Charting and Cartography web site at
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Interfacing with GPS Units}}
{}K{\footnote Interfacing with GPS Units}\par\pard\plain\li500\sb200\fi0

Of the other possible fplan improvements I've thought of, the one that 
most interests me is a better interface with GPS receivers.  I suspect 
that most other pilots who have GPS capability are like myself.  I prefer 
using it over VORs because of the accuracy, the flexibility and freedom 
it offers in constructing a flight route, as well as the reduced cockpit 
work loads. (At the same time I'm quite wary of the planned decommission 
of the VOR system. It's important to have a back up system available 
if possible).
\par\pard\plain
\li500{}
\sb200\fi0
Systems like GPS and INS have a unique set of problems when it comes 
to human factors. Incorrectly entering a waypoint can be the start of 
much bigger problems.  The ability to generate a waypoint or route file 
(in a format such that it can be uploaded directly to your GPS receiver) 
from an fplan route would be a very nifty capability. There is already an 
abundance of freely distributable programs for uploading and downloading 
route and waypoint files to many popular GPS units.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{4.3 Mailing List}}
{}#{\footnote TOC_21}
{}K{\footnote Mailing List}

{}#{\footnote mailing_list}
{}K{\footnote mailing_list}


The Gnome Project now hosts 
a mailing list for fplan developers. The list is intended to provide a 
forum for the discussion of fplan development tasks and design issues. The 
list is open to all who would like to participate in fplan development, 
contribute ideas or suggestions, or simply lurk to keep track of where 
things are going. To join the list, send a mail message with the subject 
"subscribe" and an empty body to 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 <fplan-list-request@gnome.org>}
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{4.4 Other Software}}
{}#{\footnote TOC_22}
{}K{\footnote Other Software}


{\pard\plain\f0\sb200\fs24\b\tx576{avdbtools}}
{}K{\footnote avdbtools}\par\pard\plain\li500\sb200\fi0

{}#{\footnote avdbtools_software}
{}K{\footnote avdbtools_software}


The databases distributed with fplan were created using the avdbtools 
package (short for aviation database tools). The package is a collection 
of software designed to assist in creating and maintaining databases for 
aviation applications. As of this release, avdbtools consists of a single 
application that reads the databases distributed by the (United States) 
National Flight Data Center, and converts them into formats usable by 
other aviation related applications (fplan and ICAO map to be specific). 
More information can be found on the avdbtools page at 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 {}}
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{4.5 Acknowledgements}}
{}#{\footnote TOC_23}
{}K{\footnote Acknowledgements}


{\pard\plain\f0\sb200\fs24\b\tx576{Contributors}}
{}K{\footnote Contributors}\par\pard\plain\li500\sb200\fi0

Michael K. Johnson {\f1 <johnsonm@redhat.com>} contributed the implementation 
of the graphical previewer based on the Gnome, Gtk+, Glib libraries. 
He is also working on a configurable, template based Postscript(tm) 
format output for flight plans.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Other Acknowledgements}}
{}K{\footnote Other Acknowledgements}\par\pard\plain\li500\sb200\fi0

I want to thank 
Steve Tynor 
for authoring fplan and making it freely available for everyone to use and 
enjoy. The high quality of his work made it easy for me to gain a level 
of understanding of the fplan internals sufficient to make changes and 
improvements of my own. I also want to extend my gracious thanks to both 
METALab and the 
University of North Carolina at Chapel Hill 
for providing space on their web server for the fplan home page.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{4.6 Contacting the Author}}
{}#{\footnote TOC_24}
{}K{\footnote Contacting the Author}

If you find a bug in this software (especially if you also have a 
patch for it) you can contact me by electronic mail at {\f1 <jaypee@netcom.com>}. 
Questions, comments, or suggestions are welcome. I respond to all my 
e-mail, but please remember, this {\i is} a free software project 
and I do prefer flying real aircraft over playing with my computer, 
so don't be alarmed if you don't get an immediate reply.
\par\pard\plain
\li500{}
\sb200\fi0
}